{
	"name": "appway",
	"scopeName": "source.appway",
	"patterns": [{
			"include": "#comments-javadoc"
		},
		{
			"include": "#code"
		},
		{
			"include": "#module"
		}
	],
	"repository": {
		"all-types": {
			"patterns": [{
					"include": "#primitive-arrays"
				},
				{
					"include": "#primitive-types"
				},
				{
					"include": "#object-types"
				}
			]
		},
		"anonymous-classes-and-new": {
			"begin": "\\bnew\\b",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.new.appway"
				}
			},
			"end": "(?=;|\\)|,|:|}|\\+)",
			"patterns": [{
					"include": "#comments"
				},
				{
					"include": "#function-call"
				},
				{
					"include": "#all-types"
				},
				{
					"begin": "(?<!\\])\\s*({)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.section.inner-class.begin.bracket.curly.appway"
						}
					},
					"end": "}",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.inner-class.end.bracket.curly.appway"
						}
					},
					"name": "meta.inner-class.appway",
					"patterns": [{
						"include": "#class-body"
					}]
				},
				{
					"include": "#parens"
				}
			]
		},
		"class": {
			"begin": "(?=\\w?[\\w\\s]*(?:DataClass)\\s+\\w+)",
			"end": "\\bEnd\\b",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.class.end.bracket.curly.appway"
				}
			},
			"name": "meta.class.appway",
			"patterns": [{
					"include": "#comments"
				},
				{
					"captures": {
						"1": {
							"name": "storage.modifier.appway"
						},
						"2": {
							"name": "entity.name.type.class.appway"
						}
					},
					"match": "(DataClass)\\s+(\\w+)",
					"name": "meta.class.identifier.appway"
				},
				{
					"begin": "extends",
					"beginCaptures": {
						"0": {
							"name": "storage.modifier.extends.appway"
						}
					},
					"end": "(?={|implements)",
					"name": "meta.definition.class.inherited.classes.appway",
					"patterns": [{
							"include": "#object-types-inherited"
						},
						{
							"include": "#comments"
						}
					]
				},
				{
					"begin": "(implements)\\s",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.implements.appway"
						}
					},
					"end": "(?=\\s*extends|\\{)",
					"name": "meta.definition.class.implemented.interfaces.appway",
					"patterns": [{
							"include": "#object-types-inherited"
						},
						{
							"include": "#comments"
						}
					]
				},
				{
					"begin": "\\b(Begin)\\b",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.class.begin.bracket.curly.appway"
						}
					},
					"end": "\\b(?=End)\\b",
					"contentName": "meta.class.body.appway",
					"patterns": [{
						"include": "#class-body"
					}]
				}
			]
		},
		"class-body": {
			"patterns": [{
					"include": "#comments-javadoc"
				},
				{
					"include": "#comments"
				},
				{
					"include": "#class"
				},
				{
					"include": "#methods"
				},
				{
					"include": "#member-variables"
				},
				{
					"include": "#code"
				}
			]
		},
		"code": {
			"patterns": [{
					"include": "#comments"
				},
				{
					"include": "#class"
				},
				{
					"include": "#try-catch-finally"
				},
				{
					"include": "#parens"
				},
				{
					"include": "#constants-and-special-vars"
				},
				{
					"include": "#numbers"
				},
				{
					"include": "#anonymous-classes-and-new"
				},
				{
					"include": "#lambda-expression"
				},
				{
					"include": "#keywords"
				},
				{
					"include": "#method-call"
				},
				{
					"include": "#function-call"
				},
				{
					"include": "#variables"
				},
				{
					"include": "#objects"
				},
				{
					"include": "#properties"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#all-types"
				},
				{
					"match": ",",
					"name": "punctuation.separator.delimiter.appway"
				},
				{
					"match": "\\.",
					"name": "punctuation.separator.period.appway"
				},
				{
					"match": ";",
					"name": "punctuation.terminator.appway"
				}
			]
		},
		"comments": {
			"patterns": [{
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.appway"
						}
					},
					"match": "/\\*\\*/",
					"name": "comment.block.empty.appway"
				},
				{
					"include": "text.html.javadoc"
				},
				{
					"include": "#comments-inline"
				}
			]
		},
		"comments-inline": {
			"patterns": [{
					"begin": "/\\*",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.appway"
						}
					},
					"end": "\\*/",
					"name": "comment.block.appway"
				},
				{
					"begin": "(^[ \\t]+)?(?=//)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.appway"
						}
					},
					"end": "(?!\\G)",
					"patterns": [{
						"begin": "//",
						"beginCaptures": {
							"0": {
								"name": "punctuation.definition.comment.appway"
							}
						},
						"end": "\\n",
						"name": "comment.line.double-slash.appway"
					}]
				}
			]
		},
		"comments-javadoc": {
			"patterns": [{
				"begin": "^\\s*/\\*\\*(?!/)",
				"beginCaptures": {
					"0": {
						"name": "punctuation.definition.comment.appway"
					}
				},
				"end": "\\*/",
				"endCaptures": {
					"0": {
						"name": "punctuation.definition.comment.appway"
					}
				},
				"name": "comment.block.javadoc.appway",
				"patterns": [{
						"match": "@(author|deprecated|return|see|serial|since|version)\\b",
						"name": "keyword.other.documentation.javadoc.appway"
					},
					{
						"match": "(@param)\\s+(\\S+)",
						"captures": {
							"1": {
								"name": "keyword.other.documentation.javadoc.appway"
							},
							"2": {
								"name": "variable.parameter.appway"
							}
						}
					},
					{
						"match": "(@(?:exception|throws))\\s+(\\S+)",
						"captures": {
							"1": {
								"name": "keyword.other.documentation.javadoc.appway"
							},
							"2": {
								"name": "entity.name.type.class.appway"
							}
						}
					},
					{
						"match": "{(@link)\\s+(\\S+)?#([\\w$]+\\s*\\([^\\(\\)]*\\)).*}",
						"captures": {
							"1": {
								"name": "keyword.other.documentation.javadoc.appway"
							},
							"2": {
								"name": "entity.name.type.class.appway"
							},
							"3": {
								"name": "variable.parameter.appway"
							}
						}
					}
				]
			}]
		},
		"constants-and-special-vars": {
			"patterns": [{
					"match": "\\b(true|false|null)\\b",
					"name": "constant.language.appway"
				},
				{
					"match": "\\bthis\\b",
					"name": "variable.language.this.appway"
				},
				{
					"match": "\\bsuper\\b",
					"name": "variable.language.appway"
				}
			]
		},

		"function-call": {
			"begin": "([A-Za-z_$][\\w$]*)\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function.appway"
				},
				"2": {
					"name": "punctuation.definition.parameters.begin.bracket.round.appway"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.end.bracket.round.appway"
				}
			},
			"name": "meta.function-call.appway",
			"patterns": [{
				"include": "#code"
			}]
		},
		"keywords": {
			"patterns": [{
					"match": "\\b(Script|Begin|End)\\b",
					"name": "keyword.block.appway"
				},
				{
					"match": "\\b(DataClass|Function)\\b",
					"name": "keyword.structure.appway"
				},
				{
					"match": "\\b(Return|Break|Continue|While|For|ForEach|Condition|In|Step|If|Else|ElseIf|Do)\\b",
					"name": "keyword.control.appway"
				},
				{
					"match": "((&|\\^|\\||<<|>>>?)=)",
					"name": "keyword.operator.assignment.bitwise.appway"
				},
				{
					"match": "(===?|!=|<=|>=|<>|<|>)",
					"name": "keyword.operator.comparison.appway"
				},
				{
					"match": "([+*/%-]=)",
					"name": "keyword.operator.assignment.arithmetic.appway"
				},
				{
					"match": "(=)",
					"name": "keyword.operator.assignment.appway"
				},
				{
					"match": "(\\-\\-|\\+\\+)",
					"name": "keyword.operator.increment-decrement.appway"
				},
				{
					"match": "(\\-|\\+|\\*|\\/|%)",
					"name": "keyword.operator.arithmetic.appway"
				},
				{
					"match": "(!|&&|\\|\\|)",
					"name": "keyword.operator.logical.appway"
				},
				{
					"match": "(\\||&)",
					"name": "keyword.operator.bitwise.appway"
				},
				{
					"match": "\\b(Nothing|None|Synchronize)\\b",
					"name": "keyword.reserved.appway"
				}
			]
		},
		"lambda-expression": {
			"patterns": [{
				"match": "->",
				"name": "storage.type.function.arrow.appway"
			}]
		},
		"member-variables": {
			"begin": "(?=private|protected|public|native|synchronized|abstract|threadsafe|transient|static|final)",
			"end": "(?=\\=|;)",
			"patterns": [{
					"include": "#variables"
				},
				{
					"include": "#primitive-arrays"
				},
				{
					"include": "#object-types"
				}
			]
		},
		"method-call": {
			"begin": "(\\.)\\s*([A-Za-z_$][\\w$]*)\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "punctuation.separator.period.appway"
				},
				"2": {
					"name": "entity.name.function.appway"
				},
				"3": {
					"name": "punctuation.definition.parameters.begin.bracket.round.appway"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.end.bracket.round.appway"
				}
			},
			"name": "meta.method-call.appway",
			"patterns": [{
				"include": "#code"
			}]
		},
		"methods": {
			"begin": "(?!new)(?=[\\w<].*\\s+)(?=([^=/]|/(?!/))+\\()",
			"end": "(})|(?=;)",
			"endCaptures": {
				"1": {
					"name": "punctuation.section.method.end.bracket.curly.appway"
				}
			},
			"name": "meta.method.appway",
			"patterns": [{
					"begin": "(\\w+)\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.appway"
						},
						"2": {
							"name": "punctuation.definition.parameters.begin.bracket.round.appway"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.parameters.end.bracket.round.appway"
						}
					},
					"name": "meta.method.identifier.appway",
					"patterns": [{
							"include": "#parameters"
						},
						{
							"include": "#parens"
						},
						{
							"include": "#comments-inline"
						}
					]
				},
				{
					"begin": "(?=\\w.*\\s+\\w+\\s*\\()",
					"end": "(?=\\s+\\w+\\s*\\()",
					"name": "meta.method.return-type.appway",
					"patterns": [{
							"include": "#all-types"
						},
						{
							"include": "#parens"
						}
					]
				},
				{
					"include": "#throws"
				},
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.method.begin.bracket.curly.appway"
						}
					},
					"end": "(?=})",
					"contentName": "meta.method.body.appway",
					"patterns": [{
						"include": "#code"
					}]
				},
				{
					"include": "#comments"
				}
			]
		},
		"module": {
			"begin": "((open)\\s)?(module)\\s+(\\w+)",
			"end": "}",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.appway"
				},
				"3": {
					"name": "storage.modifier.appway"
				},
				"4": {
					"name": "entity.name.type.module.appway"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.section.module.end.bracket.curly.appway"
				}
			},
			"name": "meta.module.appway",
			"patterns": [{
				"begin": "{",
				"beginCaptures": {
					"0": {
						"name": "punctuation.section.module.begin.bracket.curly.appway"
					}
				},
				"end": "(?=})",
				"contentName": "meta.module.body.appway",
				"patterns": [{
					"match": "\\b(requires|transitive|exports|opens|to|uses|provides|with)\\b",
					"name": "keyword.module.appway"
				}]
			}]
		},
		"numbers": {
			"patterns": [{
					"match": "(?x)\n\\b(?<!\\$)\n0(x|X)\n(\n  (?<!\\.)[0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?[Ll]?(?!\\.)\n  |\n  (\n    [0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?\\.?\n    |\n    ([0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?)?\\.[0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?\n  )\n  [Pp][+-]?[0-9]([0-9_]*[0-9])?[FfDd]?\n)\n\\b(?!\\$)",
					"name": "constant.numeric.hex.appway"
				},
				{
					"match": "\\b(?<!\\$)0(b|B)[01]([01_]*[01])?[Ll]?\\b(?!\\$)",
					"name": "constant.numeric.binary.appway"
				},
				{
					"match": "\\b(?<!\\$)0[0-7]([0-7_]*[0-7])?[Ll]?\\b(?!\\$)",
					"name": "constant.numeric.octal.appway"
				},
				{
					"match": "(?x)\n(?<!\\$)\n(\n  \\b[0-9]([0-9_]*[0-9])?\\.\\B(?!\\.)\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([0-9]([0-9_]*[0-9])?)([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  (?<!\\.)\\B\\.[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b(0|[1-9]([0-9_]*[0-9])?)(?!\\.)[Ll]?\\b\n)\n(?!\\$)",
					"name": "constant.numeric.decimal.appway"
				}
			]
		},
		"object-types": {
			"patterns": [{
					"begin": "\\b((?:[A-Za-z]\\w*\\s*\\.\\s*)*)([A-Z]\\w*)\\s*(?=\\[)",
					"beginCaptures": {
						"1": {
							"patterns": [{
									"match": "[A-Za-z]\\w*",
									"name": "storage.type.appway"
								},
								{
									"match": "\\.",
									"name": "punctuation.separator.period.appway"
								}
							]
						},
						"2": {
							"name": "storage.type.object.array.appway"
						}
					},
					"end": "(?!\\s*\\[)",
					"patterns": [{
							"include": "#comments"
						},
						{
							"include": "#parens"
						}
					]
				},
				{
					"match": "\\b((?:[A-Za-z]\\w*\\s*\\.\\s*)*[A-Z]\\w*)\\s*(?=<)",
					"captures": {
						"1": {
							"patterns": [{
									"match": "[A-Za-z]\\w*",
									"name": "storage.type.appway"
								},
								{
									"match": "\\.",
									"name": "punctuation.separator.period.appway"
								}
							]
						}
					}
				},
				{
					"match": "\\b((?:[A-Za-z]\\w*\\s*\\.\\s*)*[A-Z]\\w*)\\b((?=\\s*[A-Za-z$_\\n])|(?=\\s*\\.\\.\\.))",
					"captures": {
						"1": {
							"patterns": [{
									"match": "[A-Za-z]\\w*",
									"name": "storage.type.appway"
								},
								{
									"match": "\\.",
									"name": "punctuation.separator.period.appway"
								}
							]
						}
					}
				}
			]
		},
		"object-types-inherited": {
			"patterns": [{
					"match": "\\b(?:[A-Z]\\w*\\s*(\\.)\\s*)*[A-Z]\\w*\\b",
					"name": "entity.other.inherited-class.appway",
					"captures": {
						"1": {
							"name": "punctuation.separator.period.appway"
						}
					}
				},
				{
					"match": ",",
					"name": "punctuation.separator.delimiter.appway"
				}
			]
		},
		"objects": {
			"match": "(?<![\\w$])[a-zA-Z_$][\\w$]*(?=\\s*\\.\\s*[\\w$]+)",
			"name": "variable.other.object.appway"
		},
		"parameters": {
			"patterns": [{
					"match": "\\bfinal\\b",
					"name": "storage.modifier.appway"
				},
				{
					"include": "#all-types"
				},
				{
					"include": "#strings"
				},
				{
					"match": "\\w+",
					"name": "variable.parameter.appway"
				},
				{
					"match": ",",
					"name": "punctuation.separator.delimiter.appway"
				},
				{
					"match": "\\.\\.\\.",
					"name": "punctuation.definition.parameters.varargs.appway"
				}
			]
		},
		"parens": {
			"patterns": [{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.bracket.round.appway"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.bracket.round.appway"
						}
					},
					"patterns": [{
						"include": "#code"
					}]
				},
				{
					"begin": "\\[",
					"beginCaptures": {
						"0": {
							"name": "punctuation.bracket.square.appway"
						}
					},
					"end": "\\]",
					"endCaptures": {
						"0": {
							"name": "punctuation.bracket.square.appway"
						}
					},
					"patterns": [{
						"include": "#code"
					}]
				},
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.bracket.curly.appway"
						}
					},
					"end": "}",
					"endCaptures": {
						"0": {
							"name": "punctuation.bracket.curly.appway"
						}
					},
					"patterns": [{
						"include": "#code"
					}]
				}
			]
		},
		"primitive-arrays": {
			"patterns": [{
				"begin": "\\b(Indexed)\\b\\s+(Any|Boolean|Integer|Double|Float|Long|String)\\b\\s*",
				"beginCaptures": {
					"1": {
						"name": "storage.type.primitive.array.appway"
					}
				},
				"end": "(?!\\s*\\[)",
				"patterns": [{
						"include": "#comments"
					},
					{
						"include": "#parens"
					}
				]
			}]
		},
		"primitive-types": {
			"match": "\\b(Any|Boolean|Date|String)\\b",
			"name": "storage.type.primitive.appway"
		},
		"properties": {
			"patterns": [{
					"match": "(\\.)\\s*([a-zA-Z_$][\\w$]*)(?=\\s*\\.\\s*[a-zA-Z_$][\\w$]*)",
					"captures": {
						"1": {
							"name": "punctuation.separator.period.appway"
						},
						"2": {
							"name": "variable.other.object.property.appway"
						}
					}
				},
				{
					"match": "(\\.)\\s*([a-zA-Z_$][\\w$]*)",
					"captures": {
						"1": {
							"name": "punctuation.separator.period.appway"
						},
						"2": {
							"name": "variable.other.property.appway"
						}
					}
				},
				{
					"match": "(\\.)\\s*([0-9][\\w$]*)",
					"captures": {
						"1": {
							"name": "punctuation.separator.period.appway"
						},
						"2": {
							"name": "invalid.illegal.identifier.appway"
						}
					}
				}
			]
		},
		"strings": {
			"patterns": [{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.appway"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.appway"
						}
					},
					"name": "string.quoted.double.appway",
					"patterns": [{
						"match": "\\\\.",
						"name": "constant.character.escape.appway"
					}]
				},
				{
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.appway"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.appway"
						}
					},
					"name": "string.quoted.single.appway",
					"patterns": [{
						"match": "\\\\.",
						"name": "constant.character.escape.appway"
					}]
				}
			]
		},
		"throws": {
			"begin": "throws",
			"beginCaptures": {
				"0": {
					"name": "storage.modifier.appway"
				}
			},
			"end": "(?={|;)",
			"name": "meta.throwables.appway",
			"patterns": [{
					"match": ",",
					"name": "punctuation.separator.delimiter.appway"
				},
				{
					"match": "[a-zA-Z$_][\\.a-zA-Z0-9$_]*",
					"name": "storage.type.appway"
				}
			]
		},
		"try-catch-finally": {
			"patterns": [{
					"begin": "\\bTry\\b",
					"beginCaptures": {
						"0": {
							"name": "keyword.control.try.appway"
						}
					},
					"name": "meta.try.appway",
					"patterns": [{
						"include": "#code"
					}]
				},
				{
					"begin": "\\b(Catch)\\b",
					"beginCaptures": {
						"0": {
							"name": "keyword.control.catch.appway"
						}
					},
					"name": "meta.catch.appway",
					"patterns": [{
						"include": "#code"
					}]
				},
				{
					"begin": "\\bFinally\\b",
					"beginCaptures": {
						"0": {
							"name": "keyword.control.finally.appway"
						}
					},

					"name": "meta.finally.appway",
					"patterns": [{
						"include": "#code"
					}]
				}
			]
		},
		"variables": {
			"begin": "(?x)\n(?=\n  (\n    (void|boolean|byte|char|short|int|float|long|double)\n    |\n    (?>(\\w+\\.)*[A-Z]+\\w*) # e.g. `javax.ws.rs.Response`, or `String`\n  )\n  (\n    <[\\w<>,\\.?\\s\\[\\]]*> # e.g. `HashMap<Integer, String>`, or `List<java.lang.String>`\n  )?\n  (\n    (\\[\\])* # int[][]\n  )?\n  \\s+\n  [A-Za-z_$][\\w$]* # At least one identifier after space\n  ([\\w\\[\\],$][\\w\\[\\],\\s]*)? # possibly primitive array or additional identifiers\n  \\s*(=|;)\n)",
			"end": "(?=\\=|;)",
			"name": "meta.definition.variable.java",
			"patterns": [{
					"match": "([A-Za-z$_][\\w$]*)(?=\\s*(\\[\\])*\\s*(;|=|,))",
					"captures": {
						"1": {
							"name": "variable.other.definition.java"
						}
					}
				},
				{
					"include": "#all-types"
				},
				{
					"include": "#code"
				}
			]
		}
	}
}